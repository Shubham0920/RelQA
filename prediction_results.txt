Input Question: How many heads of the departments are older than 56 ?
Expected SQL: SELECT count(*) FROM head WHERE age  >  56
Predicted SQL: SELECT count(*) FROM head WHERE age > 56

==================================================
Input Question: List the name, born state and age of the heads of departments ordered by age.
Expected SQL: SELECT name ,  born_state ,  age FROM head ORDER BY age
Predicted SQL: SELECT name , born_state , age FROM head ORDER BY age

==================================================
Input Question: List the creation year, name and budget of each department.
Expected SQL: SELECT creation ,  name ,  budget_in_billions FROM department
Predicted SQL: SELECT creation , name , budget_in_billions FROM department

==================================================
Input Question: What are the maximum and minimum budget of the departments?
Expected SQL: SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department
Predicted SQL: SELECT max(budget_in_billions) , min(budget_in_billions) FROM department

==================================================
Input Question: What is the average number of employees of the departments whose rank is between 10 and 15?
Expected SQL: SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15
Predicted SQL: SELECT avg(num_employees) FROM department WHERE rank BETWEEN 10 AND 15

==================================================
Input Question: What are the names of the heads who are born outside the California state?
Expected SQL: SELECT name FROM head WHERE born_state != 'California'
Predicted SQL: SELECT name FROM head WHERE born_state != 'California'

==================================================
Input Question: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?
Expected SQL: SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'
Predicted SQL: SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'

==================================================
Input Question: What are the names of the states where at least 3 heads were born?
Expected SQL: SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3
Predicted SQL: SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3

==================================================
Input Question: In which year were most departments established?
Expected SQL: SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1
Predicted SQL: SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1

==================================================
Input Question: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?
Expected SQL: SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'
Predicted SQL: SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'

==================================================
Input Question: How many acting statuses are there?
Expected SQL: SELECT count(DISTINCT temporary_acting) FROM management
Predicted SQL: SELECT count(DISTINCT temporary_acting) FROM management

==================================================
Input Question: How many departments are led by heads who are not mentioned?
Expected SQL: SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);
Predicted SQL: SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);

==================================================
Input Question: What are the distinct ages of the heads who are acting?
Expected SQL: SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'
Predicted SQL: SELECT DISTINCT T1.age FROM management AS T1 JOIN head AS T2 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'

==================================================
Input Question: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.
Expected SQL: SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'
Predicted SQL: SELECT T1.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.name = 'Treasury' INTERSECT SELECT T1.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_

==================================================
Input Question: Which department has more than 1 head at a time? List the id, name and the number of heads.
Expected SQL: SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1
Predicted SQL: SELECT T1.department_id , T1.name , count(*) FROM management AS T1 JOIN department AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1

==================================================
Input Question: Which head's name has the substring 'Ha'? List the id and name.
Expected SQL: SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'
Predicted SQL: SELECT head_id , name FROM head WHERE name LIKE '%Ha%'

==================================================
Input Question: How many farms are there?
Expected SQL: SELECT count(*) FROM farm
Predicted SQL: SELECT count(*) FROM farm

==================================================
Input Question: Count the number of farms.
Expected SQL: SELECT count(*) FROM farm
Predicted SQL: SELECT count(*) FROM farm

==================================================
Input Question: List the total number of horses on farms in ascending order.
Expected SQL: SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC
Predicted SQL: SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC

==================================================
Input Question: What is the total horses record for each farm, sorted ascending?
Expected SQL: SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC
Predicted SQL: SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC

==================================================
Input Question: What are the hosts of competitions whose theme is not "Aliens"?
Expected SQL: SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'
Predicted SQL: SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'

==================================================
Input Question: Return the hosts of competitions for which the theme is not Aliens?
Expected SQL: SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'
Predicted SQL: SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'

==================================================
Input Question: What are the themes of farm competitions sorted by year in ascending order?
Expected SQL: SELECT Theme FROM farm_competition ORDER BY YEAR ASC
Predicted SQL: SELECT Theme FROM farm_competition ORDER BY YEAR ASC

==================================================
Input Question: Return the themes of farm competitions, sorted by year ascending.
Expected SQL: SELECT Theme FROM farm_competition ORDER BY YEAR ASC
Predicted SQL: SELECT Theme FROM farm_competition ORDER BY YEAR ASC

==================================================
Input Question: What is the average number of working horses of farms with more than 5000 total number of horses?
Expected SQL: SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000
Predicted SQL: SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000

==================================================
Input Question: Give the average number of working horses on farms with more than 5000 total horses.
Expected SQL: SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000
Predicted SQL: SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000

==================================================
Input Question: What are the maximum and minimum number of cows across all farms.
Expected SQL: SELECT max(Cows) ,  min(Cows) FROM farm
Predicted SQL: SELECT max(Cows) , min(Cows) FROM farm

==================================================
Input Question: Return the maximum and minimum number of cows across all farms.
Expected SQL: SELECT max(Cows) ,  min(Cows) FROM farm
Predicted SQL: SELECT max(Cows) , min(Cows) FROM farm

==================================================
Input Question: How many different statuses do cities have?
Expected SQL: SELECT count(DISTINCT Status) FROM city
Predicted SQL: SELECT count(DISTINCT Status) FROM city

==================================================
Input Question: Count the number of different statuses.
Expected SQL: SELECT count(DISTINCT Status) FROM city
Predicted SQL: SELECT count(DISTINCT Status) FROM city

==================================================
Input Question: List official names of cities in descending order of population.
Expected SQL: SELECT Official_Name FROM city ORDER BY Population DESC
Predicted SQL: SELECT Official_Name FROM city ORDER BY Population DESC

==================================================
Input Question: What are the official names of cities, ordered descending by population?
Expected SQL: SELECT Official_Name FROM city ORDER BY Population DESC
Predicted SQL: SELECT Official_Name FROM city ORDER BY Population DESC

==================================================
Input Question: List the official name and status of the city with the largest population.
Expected SQL: SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1
Predicted SQL: SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1

==================================================
Input Question: What is the official name and status of the city with the most residents?
Expected SQL: SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1
Predicted SQL: SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1

==================================================
Input Question: Show the years and the official names of the host cities of competitions.
Expected SQL: SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID
Predicted SQL: SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID

==================================================
Input Question: Give the years and official names of the cities of each competition.
Expected SQL: SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID
Predicted SQL: SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID

==================================================
Input Question: Show the official names of the cities that have hosted more than one competition.
Expected SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1
Predicted SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1

==================================================
Input Question: What are the official names of cities that have hosted more than one competition?
Expected SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1
Predicted SQL: SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1

==================================================
Input Question: Show the status of the city that has hosted the greatest number of competitions.
Expected SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1
Predicted SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1

==================================================
Input Question: What is the status of the city that has hosted the most competitions?
Expected SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1
Predicted SQL: SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1

==================================================
Input Question: Please show the themes of competitions with host cities having populations larger than 1000.
Expected SQL: SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000
Predicted SQL: SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000

==================================================
Input Question: What are the themes of competitions that have corresponding host cities with more than 1000 residents?
Expected SQL: SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000
Predicted SQL: SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000

==================================================
Input Question: Please show the different statuses of cities and the average population of cities with each status.
Expected SQL: SELECT Status ,  avg(Population) FROM city GROUP BY Status
Predicted SQL: SELECT Status , avg(Population) FROM city GROUP BY Status

==================================================
Input Question: What are the statuses and average populations of each city?
Expected SQL: SELECT Status ,  avg(Population) FROM city GROUP BY Status
Predicted SQL: SELECT Status , avg(Population) FROM city GROUP BY Status

==================================================
Input Question: Please show the different statuses, ordered by the number of cities that have each.
Expected SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC
Predicted SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC

==================================================
Input Question: Return the different statuses of cities, ascending by frequency.
Expected SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC
Predicted SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC

==================================================
Input Question: List the most common type of Status across cities.
Expected SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1
Predicted SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1

==================================================
Input Question: What is the most common status across all cities?
Expected SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1
Predicted SQL: SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1

==================================================
Input Question: List the official names of cities that have not held any competition.
Expected SQL: SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)
Predicted SQL: SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)

==================================================
